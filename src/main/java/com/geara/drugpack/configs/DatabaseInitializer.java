package com.geara.drugpack.configs;

import javax.sql.DataSource;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import java.sql.Connection;
import java.sql.Statement;

@RequiredArgsConstructor
@Component
public class DatabaseInitializer {

  private final DataSource dataSource;

  @PostConstruct
  public void initialize() {
    try (Connection connection = dataSource.getConnection()) {
      String sql =
              // add fuzzystrmatch to db
              "CREATE EXTENSION IF NOT EXISTS fuzzystrmatch; "

              // create ru metaphone https://moluch.ru/archive/19/1967/
              + "CREATE OR REPLACE FUNCTION rumetaphone(W text) "
              + "RETURNS text "
              + "LANGUAGE plpgsql "
              + "AS $$ "
              + "DECLARE "
              + "  alf text; "
              + "  cns1 text; "
              + "  cns2 text; "
              + "  cns3 text; "
              + "  ch text; "
              + "  ct text; "
              + "  S text; "
              + "  V text; "
              + "  i int; "
              + "  B int; "
              + "  c char(1); "
              + "  old_c char(1); "
              + "BEGIN "
              + "  alf := 'ОЕАИУЭЮЯПСТРКЛМНБВГДЖЗЙФХЦЧШЩЁЫ'; "
              + "  cns1 := 'БЗДВГ'; "
              + "  cns2 := 'ПСТФК'; "
              + "  cns3 := 'ПСТКБВГДЖЗФХЦЧШЩ'; "
              + "  ch := 'ОЮЕЭЯЁЫ'; "
              + "  ct := 'АУИИАИА'; "
              + "  W := UPPER(W); "
              + "  S := ''; "
              + "  V := ''; "
              + "  i := 1; "
              + "  WHILE i <= LENGTH(W) LOOP "
              + "    c := SUBSTRING(W, i, 1); "
              + "    IF POSITION(c IN alf) > 0 THEN "
              + "      S := S || c; "
              + "    END IF; "
              + "    i := i + 1; "
              + "  END LOOP; "
              + "  "
              + "  IF LENGTH(S) = 0 THEN "
              + "    RETURN ''; "
              + "  END IF; "
              + "  IF LENGTH(S) > 6 THEN "
              + "    S := LEFT(S, LENGTH(S) - 6) || "
              + "         CASE RIGHT(S, 6) "
              + "           WHEN 'ОВСКИЙ' THEN '@' "
              + "           WHEN 'ЕВСКИЙ' THEN '#' "
              + "           WHEN 'ОВСКАЯ' THEN '$' "
              + "           WHEN 'ЕВСКАЯ' THEN '%' "
              + "           ELSE RIGHT(S, 6) "
              + "         END; "
              + "  END IF; "
              + "  IF LENGTH(S) > 4 THEN "
              + "    S := LEFT(S, LENGTH(S) - 4) || "
              + "         CASE RIGHT(S, 4) "
              + "           WHEN 'ИЕВА' THEN '9' "
              + "           WHEN 'ЕЕВА' THEN '9' "
              + "           ELSE RIGHT(S, 4) "
              + "         END; "
              + "  END IF; "
              + "  IF LENGTH(S) > 3 THEN "
              + "    S := LEFT(S, LENGTH(S) - 3) || "
              + "         CASE RIGHT(S, 3) "
              + "           WHEN 'ОВА' THEN '9' "
              + "           WHEN 'ЕВА' THEN '9' "
              + "           WHEN 'ИНА' THEN '1' "
              + "           WHEN 'ИЕВ' THEN '4' "
              + "           WHEN 'ЕЕВ' THEN '4' "
              + "           WHEN 'НКО' THEN '3' "
              + "           ELSE RIGHT(S, 3) "
              + "         END; "
              + "  END IF; "
              + "  IF LENGTH(S) > 2 THEN "
              + "    S := LEFT(S, LENGTH(S) - 2) || "
              + "         CASE RIGHT(S, 2) "
              + "           WHEN 'ОВ' THEN '4' "
              + "           WHEN 'ЕВ' THEN '4' "
              + "           WHEN 'АЯ' THEN '6' "
              + "           WHEN 'ИЙ' THEN '7' "
              + "           WHEN 'ЫЙ' THEN '7' "
              + "           WHEN 'ЫХ' THEN '5' "
              + "           WHEN 'ИХ' THEN '5' "
              + "           WHEN 'ИН' THEN '8' "
              + "           WHEN 'ИК' THEN '2' "
              + "           WHEN 'ЕК' THEN '2' "
              + "           WHEN 'УК' THEN '0' "
              + "           WHEN 'ЮК' THEN '0' "
              + "           ELSE RIGHT(S, 2) "
              + "         END; "
              + "  END IF; "
              + "  B := POSITION(RIGHT(S, 1) IN cns1); "
              + "  IF B > 0 THEN "
              + "    S := LEFT(S, LENGTH(S) - 1) || SUBSTRING(cns2 FROM B FOR 1); "
              + "  END IF; "
              + "  old_c := ' '; "
              + "  i := 1; "
              + "  WHILE i <= LENGTH(S) LOOP "
              + "    c := SUBSTRING(S, i, 1); "
              + "    B := POSITION(c IN ch); "
              + "    IF B > 0 THEN "
              + "      IF old_c = 'Й' OR old_c = 'И' THEN "
              + "        IF c = 'О' OR c = 'Е' THEN "
              + "          old_c := 'И'; "
              + "          S := LEFT(S, LENGTH(S) - 1) || old_c; "
              + "        ELSE "
              + "          IF c <> old_c THEN "
              + "            V := V || SUBSTRING(ct FROM B FOR 1); "
              + "          END IF; "
              + "        END IF; "
              + "      ELSE "
              + "        IF c <> old_c THEN "
              + "          V := V || SUBSTRING(ct FROM B FOR 1); "
              + "        END IF; "
              + "      END IF; "
              + "    ELSE "
              + "      IF c <> old_c AND POSITION(c IN cns3) > 0 THEN "
              + "        B := POSITION(old_c IN cns1); "
              + "        IF B > 0 THEN "
              + "          old_c := SUBSTRING(cns2 FROM B FOR 1); "
              + "          V := LEFT(V, LENGTH(V) - 1) || old_c; "
              + "        END IF; "
              + "      END IF; "
              + "      IF c <> old_c THEN "
              + "        V := V || c; "
              + "      END IF; "
              + "    END IF; "
              + "    old_c := c; "
              + "    i := i + 1; "
              + "  END LOOP; "
              + "  "
              + "  RETURN V; "
              + "END; "
              + "$$; "

              // create drug_id_seq if not exists
              + "DO "
              + "$$ "
              + "BEGIN "
              + "    IF NOT EXISTS ( "
              + "        SELECT 1 "
              + "        FROM information_schema.sequences "
              + "        WHERE sequence_name = 'drug_id_seq' "
              + "    ) THEN "
              + "        CREATE SEQUENCE drug_id_seq; "
              + "    END IF; "
              + "END "
              + "$$; "

              // add all drugs from aurora (but only if packing_id not present in drug table)
              + "INSERT INTO drug (id, aurora_packing_id, aurora_description_id, firm, name, packaging, metaphone) "
              + "SELECT "
              + "    nextval('drug_id_seq') AS id, "
              + "    packing_id AS aurora_packing_id, "
              + "    desc_id AS aurora_description_id, "
              + "    firms AS firm, "
              + "    prep_full AS name, "
              + "    packing_short AS packaging, "
              + "    STRING_AGG(rumetaphone(word), ' ') AS metaphone "
              + "FROM ( "
              + "    SELECT "
              + "        packing_id, "
              + "        desc_id, "
              + "        firms, "
              + "        prep_full, "
              + "        packing_short, "
              + "        unnest(string_to_array(prep_full, ' ')) AS word "
              + "    FROM aurora_drug "
              + ") subquery "
              + "WHERE NOT EXISTS ( "
              + "    SELECT 1 "
              + "    FROM drug "
              + "    WHERE aurora_packing_id = subquery.packing_id "
              + ") "
              + "GROUP BY packing_id, desc_id, firms, prep_full, packing_short; ";

      try (Statement statement = connection.createStatement()) {
        statement.execute(sql);
      }
    } catch (Exception e) {
      throw new RuntimeException("Failed to initialize database", e);
    }
  }
}
